P = 156210697680525395807405913022225672867518230561026244167727827986872503969390713836672476231008571999805186039701198600755110769232069683662242528076520947841356681828813963095451798586327341737928960287475043247361498716148634925701665205679014796308116597863844787884835055529773239054412184291949429135511
N = P**2


def matmul(a, b):
    assert len(a[0]) == len(a)

    c = [[0 for _ in range(len(b))] for _ in range(len(a))]

    for i in range(len(a)):
        for j in range(len(b[0])):
            for k in range(len(b)):
                c[i][j] = (c[i][j] + a[i][k] * b[k][j]) % N
    return c


def matrix_power(matrix, power):
    res = [[int(i == j) for j in range(len(matrix))] for i in range(len(matrix))]

    while power:
        if power % 2:
            res = matmul(res, matrix)
        matrix = matmul(matrix, matrix)
        power //= 2
    return res


def nth_fibonacci_number(n: int) -> int:
    matrix = [[0, 1], [1, 1]]
    raised_matrix = matrix_power(matrix, n)
    return raised_matrix[1][0]


flag = int.from_bytes(b"neimark{n0w_th1s_1s_h4rd_ef9ee9e5}", "big")

print(nth_fibonacci_number(flag))
# 2965055263967027947960850978692285250254777527794854739693111948764282249206280021928430050962510233036067248524219934172654659889182384279948481783264371317398609146050167919603085025752798357823141393962964019063813322325333746325370879514096107602533666651680724289382291862866987787938607859991788293168145693011583085316704279858022272215747718804239434266393199365587596166861357754298183949143288632511932061606133114527542637629533246355982916264445156245517084367878611552481776460306319630690104374954357944389051416133530039557583198183407153286481040429843302839163762308391117576714856079999504724556997
